version: 2.1
orbs:
  slack: circleci/slack@4.9.3
commands:
  install_awscli:
    description: Install AWS CLI v
    steps:
      - run:
          name: Install AWS CLI 
          command: |
            sudo apt-get install curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_nodejs:
    description: Install Node.js 
    steps:
      - run:
          name: Install Node.js 13
          command: |
            sudo apt-get install curl
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        default: ${CIRCLE_WORKFLOW_ID:0:7}
        type: string
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.Workflow_ID>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.Workflow_ID>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        default: ${CIRCLE_WORKFLOW_ID:0:7}
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/2Mr1LS3ReUJtjwPN9o14wA/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ./backend
              npm install
              npm run migration:revert
            fi
     
jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1  
    
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
        
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build

        
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: front-end test
          command: |
             cd frontend
             npm install
             npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: backend test
          command: |
             cd backend
             npm install
             npm run test
                
#This is the analyze phase, these  two jobs check for known vlunerabilities every time we check in new code
#Note that the --audit-level parameter above specifies the minimum vulnerability level that will cause the command to fail.             
  analyze-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [analyze-frontend]
      - run:
          name: frontend scan
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=crtitcal --force
             npm audit fix --audit-level=crtitcal --force

  analyze-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [analyze-backend]
      - run:
          name: backend scan
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=crtitcal --force
             npm audit fix --audit-level=crtitcal --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      # - run:
      #     name: Save backend URL to kvdb
      #     command: |
      #       BACKEND_URL=$(aws ec2 describe-instances \
      #         --query 'Reservations[*].Instances[*].PublicDnsName' \
      #         --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --output text)
      #       echo "BACKEND_URL:${BACKEND_URL}";
      #       echo "CIRCLE_WORKFLOW_ID:${CIRCLE_WORKFLOW_ID}";
      #       curl --request PUT --data "${BACKEND_URL}" https://kvdb.io/9CLk3YrAU5QLC2qdke97cA/BACKEND_URL  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text 2>&1 | tee -a  .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - .circleci/ansible/inventory.txt
            
      - destroy-environment  


  configure-infrastructure:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints:
            - 'ec:80:25:e9:63:45:0b:35:17:98:f6:14:c6:e6:ec:92:8f:7e:7b:7c:b0:df:01:82:52:dd:96:c1:38:86:48:18'

      - attach_workspace:
          at: ~/

      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
          
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_awscli

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations >> migrations_dump.txt

      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/2Mr1LS3ReUJtjwPN9o14wA/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
   
            fi
            

      - destroy-environment
      - revert-migrations   

  deploy-frontend:
    docker:
      - image: doctrine/nodejs-aws-cli
    steps:
      - checkout

      - install_awscli
      - install_ansible
      - install_nodejs
      - restore_cache:
          keys: [frontend-build]
      # - attach_workspace:
      #     at: .
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install 
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment
      - revert-migrations   

  deploy-backend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'ec:80:25:e9:63:45:0b:35:17:98:f6:14:c6:e6:ec:92:8f:7e:7b:7c:b0:df:01:82:52:dd:96:c1:38:86:48:18'
      - attach_workspace:
          at: .

      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version

      - restore_cache:
          keys: [backend-build]

      - run:
          name: Deploy backend
          working_directory: .circleci/ansible
          command: |
            cat inventory
            ansible-playbook -i inventory deploy-server.yaml -vv

      - destroy-environment
      - revert-migrations   


  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      # - run:
      #     name: Install dependencies
      #     command: |
      #       apk --no-cache add curl
      #       apk add --update npm
      #       apk add --no-cache python3 py3-pip \
      #         && pip3 install --upgrade pip \
      #         && pip install awscli

      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi

      - destroy-environment
      - revert-migrations   


#   cloudfront-update:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             yum install -y tar gzip curl
#             curl -sL https://rpm.nodesource.com/setup_10.x | bash -
#             yum install -y nodejs
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/cloudfront.yml \
#               --stack-name InitialStack \
#               --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --tags project=udapeople 

# cleanup:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Get old stack workflow id
#           command: |
#             export OldWorkflowID=$(aws cloudformation \
#                     list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#                     --no-paginate --output text)
#             echo OldWorkflowID: "${OldWorkflowID}"
#             echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
#             # Fetch the stack names          
#             export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
#                     --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
#             echo Stack names: "${STACKS[@]}"      
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
#               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
#               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
#             fi
            

workflows:
  send-notification:
    jobs:
      - notify:
          context: slack-secrets
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - analyze-backend:
          requires: [build-backend]
      - analyze-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - analyze-frontend
            - analyze-backend      
          filters:
            branches:
              only:
                - master
      
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]